// require the express framework for building a web server
const express = require('express');
// represents an Express application, which we use to set up routes and handle requests.
const app = express();
// specifies the port the server will listen on. Here, weâ€™re using port 3000.
const PORT = 3000;
// enables parsing of JSON data in request bodies.
app.use(express.json()); 
//  is an array that acts as our mock database, storing individual blog posts.
// Each post has an id, title, and content.
const posts = [
    { id: 1, title: 'First Post', content: 'This is the first post.' },
    { id: 2, title: 'Second Post', content: 'This is the second post.' }
];
// Creating the Routes
// GET /posts: Return all blog posts
// This route listens for GET requests at /posts.
app.get('/posts', (req, res) => {
    res.json(posts);
});

// GET /posts/:id: Return a specific post by ID
app.get('/posts/:id', (req, res) => {
    const post = posts.find(p => p.id === parseInt(req.params.id)); // p is the parameter of the arrow function, representing each individual element in the posts array.
    if (!post) return res.status(404).json({ message: 'Post not found' });
    res.json(post);
});

// POST /posts: Create a new post
app.post('/posts', (req, res) => {
    const newPost = {
        id: posts.length + 1,// id is generated by taking the length of the posts array plus one.
        title: req.body.title,// req.body.title and req.body.content are accessed from the parsed JSON body.
        content: req.body.content
    };
    posts.push(newPost); // posts.push(newPost) adds the new post to the posts array.
    res.status(201).json(newPost); // sends the created post back with a 201 Created status.
});

// PUT /posts/:id: Update an existing post
app.put('/posts/:id', (req, res) => {
    const post = posts.find(p => p.id == parseInt(req.params.id));
    if (!post) return res.status(404).json({ message: 'Post not found' });
    post.title = req.body.title || post.title; // The || operator allows for partial updates: it keeps the existing title or content if no new values are provided in req.body
    post.content = req.body.content || post.content;
    res.json(post);
});

// DELETE /posts/:id: Delete a post
app.delete('/posts/:id', (req, res) => {
    const postIndex = posts.findIndex(p => p.id === parseInt(req.params.id)); // locates the index of the post with the matching ID.
    if (postIndex === -1) return res.status(404).json({ message: 'Post not found' });
    const deletedPost = posts.splice(postIndex, 1); // splice removes the post from the posts array.
    res.json(deletedPost); // res.json(deletedPost) sends the deleted post back as confirmation
});

// Handle invalid routes
// This middleware is for handling invalid routes. If no route matches the incoming request, it returns a 404 Not Found status and a message.
app.use((req, res) => {
    res.status(404).json({ message: 'Route not found' });
});

// Error handling middleware
// This middleware handles server errors, logging the error stack and returning a 500 Internal Server Error status with a message.
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: 'Server error' });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
